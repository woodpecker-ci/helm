# Default values for woodpecker.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

agent:
  enabled: true

  replicaCount: 2

  image:
    registry: docker.io
    repository: woodpeckerci/woodpecker-agent
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  env:
    WOODPECKER_SERVER: "woodpecker-server.<namespace>.svc.cluster.local:9000"
    WOODPECKER_BACKEND: kubernetes
    WOODPECKER_BACKEND_K8S_NAMESPACE: woodpecker
    WOODPECKER_BACKEND_K8S_STORAGE_CLASS: ""
    WOODPECKER_BACKEND_K8S_VOLUME_SIZE: 10G
    WOODPECKER_BACKEND_K8S_STORAGE_RWX: true
    WOODPECKER_BACKEND_K8S_POD_LABELS: ""
    WOODPECKER_BACKEND_K8S_POD_ANNOTATIONS: ""

  # Docker-in-Docker is normally not needed as Woodpecker natively supports Kubernetes
  dind:
    enabled: false
    image: "docker:20.10.12-dind"
    env:
      DOCKER_DRIVER: "overlay2"
    resources: {}

  extraSecretNamesForEnvFrom:
    - woodpecker-secret

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    # Specifies whether a service account should be created (also see RBAC subsection)
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
    rbac:
      # If your cluster has RBAC enabled and you're using the Kubernetes agent-
      # backend you'll need this. (this is true for almost all production clusters)
      # only change this if you have a non CNCF compliant cluster, missing the RBAC endpoints
      # the Role and RoleBinding are only created if serviceAccount.create is also true
      create: true
      # additional annotations and labels in role and roleBinding are only needed, if you
      # are using additional tooling to manage / verify roles or roleBindings (OPA, etc.)
      role:
        annotations: {}
        labels: {}
      roleBinding:
        annotations: {}
        labels: {}

  podAnnotations: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  dnsConfig: {}

  ## Using topology spread constraints, you can ensure that there is at least one agent
  ## pod for each topology zone, e.g. one per arch for multi-architecture clusters
  ## or one for each region for geographically distributed cloud-hosted clusters.
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: "beta.kubernetes.io/arch"
  #   whenUnsatisfiable: "DoNotSchedule"
  #   labelSelector:
  #     matchLabels:
  #       "app.kubernetes.io/name": woodpecker-agent

server:
  enabled: true

  statefulSet:
    annotations: {}
    labels: {}
    replicaCount: 1
    # The maximum number of revisions that will be maintained in the StatefulSet's revision history
    # Default in 10.
    revisionHistoryLimit: 5

  updateStrategy:
    type: RollingUpdate

  image:
    registry: docker.io
    repository: woodpeckerci/woodpecker-server
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  env:
    WOODPECKER_ADMIN: "woodpecker,admin"
    WOODPECKER_HOST: "https://xxxxxxx"
    # WOODPECKER_GITHUB: "true"

  extraSecretNamesForEnvFrom:
    # - woodpecker-github-client
    # - woodpecker-github-secret
    - woodpecker-secret

  persistentVolume:
    enabled: true
    size: 10Gi
    mountPath: "/var/lib/woodpecker"
    storageClass: ""

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations:
    {}
    # prometheus.io/scrape: "true"

  podSecurityContext:
    {}
    # fsGroup: 2000

  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: &servicePort 80

  ingress:
    enabled: false
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"

    # -- Defines which ingress controller will implement the resource
    ingressClassName: ""

    hosts:
      - host: chart-example.local
        paths:
          - path: /
            backend:
              serviceName: chart-example.local
              servicePort: *servicePort
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  dnsConfig: {}
